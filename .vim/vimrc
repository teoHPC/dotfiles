" ----------------------------
" Plugins
" ----------------------------

call plug#begin()
  "Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'               " fuzzy search
  Plug 'junegunn/vim-easy-align'        " align text on delimiters
  Plug 'junegunn/vim-peekaboo'          " show contents of registers in the sidebar
  Plug 'tpope/vim-fugitive'             " git integration
  Plug 'tpope/vim-surround'             " surround words easily
  Plug 'tpope/vim-eunuch'               " unix shell wrappers for vim
  Plug 'tpope/vim-unimpaired'           " complementary pairs of mappings
  Plug 'tpope/vim-endwise'              " adds an end to code blocks
  Plug 'tpope/vim-repeat'               " repeating with `.` for many plugins
  Plug 'tpope/vim-obsession'            " record vim sessions
  Plug 'itchyny/lightline.vim'          " status line
  Plug 'justinmk/vim-sneak'             " jump to locations quickly
  "Plug 'ward/VimCompletesMe'       " use <Tab> for vim's `ins-completion`
  Plug 'ojroques/vim-oscyank', {'branch': 'main'}     " copy text to the system clipboard from anywhere
  if has('nvim')
    Plug 'neovim/nvim-lspconfig'           " neovim's built-in LSP
    Plug 'nvim-treesitter/nvim-treesitter' " syntax highlighting

    Plug 'mfussenegger/nvim-dap'           " debugger
    Plug 'theHamsta/nvim-dap-virtual-text' " inlay hint when debugging values

    Plug 'hrsh7th/nvim-cmp'                " completion engine for nvim
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'onsails/lspkind.nvim'
    "Plug 'hrsh7th/cmp-cmdline'
    "Plug 'rcarriga/cmp-dap'             " enable when support for DAP completion from lldb is available

    Plug 'L3MON4D3/LuaSnip'             " snippets - required by some LSPs and nvim-cmp
    Plug 'hrsh7th/vim-vsnip'

    Plug 'ellisonleao/gruvbox.nvim'     " port of gruvbox with TS support
    "Plug 'folke/tokyonight.nvim'

    Plug 'stevearc/oil.nvim'            " improved netrw 
    Plug 'nvim-tree/nvim-web-devicons'  " icons for Oil
  else
    Plug 'morhetz/gruvbox'              " color scheme
    Plug 'tpope/vim-vinegar'              " improved netrw
  endif
call plug#end()


" ----------------------------
" General
" ----------------------------

set history=500  " set number of lines to remember
set autoread     " auto read when a file is changed from the outside
set hidden       " allow to hide buffers even with unsaved changes
set lazyredraw   " don't redraw while executing macros (for performance)

" copy to system clipboard
set clipboard=unnamedplus,unnamed

" ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

set ignorecase   " ignore case when searching in general
set smartcase    " be case sensitive when typing uppercase
set hlsearch     " highlight search results
set incsearch    " search as characters are entered

" No annoying sounds on errors
set noerrorbells
set novisualbell
set t_vb=


" Syntax highlighting
syntax enable
set background=dark

set encoding=utf8    " set utf8 as standard encoding
set ffs=unix,dos,mac " use Unix as the standard file type

" turn backup off, since most stuff is in git anyway
set nobackup
set noswapfile

set expandtab       " turn a tab into spaces
set smarttab        " be smart when using tabs
set tabstop=2       " make tabs 2 spaces
set shiftwidth=2    " spaces for autoindents
set autoindent      " on new lines, match indent of previous line

" mark tabs and trailing spaces
set list
set listchars=tab:-.,trail:.

set wrap                         " wrap lines
set whichwrap+=<,>,h,l           " wrap left and right when at the end
set ruler                        " always show current position
set number                       " show line numbers
set showcmd                      " show command in bottom bar
"set textwidth=80                 " set max inserted text width
set colorcolumn=+1               " highlight the textwidth column
set cursorline                   " highlight the current line
set showmatch                    " show matching brackets
set scrolloff=5                  " set 5 lines to the cursor when moving vertically
set backspace=indent,eol,start   " make backspace work as expected

set wildmenu       " visual autocomplete for command menu
set wildignorecase " ignore case in wildmenu

set completeopt=menu,menuone,noselect " completion menu

filetype plugin indent on  " enable filetype plugins and indent

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Treat .tpp files as C++ files
au BufEnter *.tpp :setlocal filetype=cpp

" Note: this is needed until Neovim 0.10 is out (approx 30 April) which has it
" in `filetype.lua`
au BufNewFile,BufRead *.usda,*.usd setf usd

" ----------------------------
" Bindings
" ----------------------------

" set `space` as <leader>
let mapleader=" "

" paste multiple times by default
xnoremap p pgvy

" list buffers and wait for selection to open
" nnoremap <leader>b :ls<cr>:b<space>
nnoremap <leader>b :Buffers<cr>

" close current buffer
nnoremap <leader>d :bd<cr>

" close the quickfix, location and preview windows
nnoremap <leader>c :cclose<cr> :lclose<cr> :pclose<cr>

" open a file
nnoremap <leader>e :e<space>

" Search for files with fzf and ag
nnoremap <leader>f :Files<cr>

" set language
nnoremap <leader>lbg :set keymap=bulgarian-phonetic<cr>
nnoremap <leader>len :set keymap=<cr>

" toggle line (n)umbers
nnoremap <leader>n :set nu!<cr>

" open netrw in the current buffer
"nnoremap <leader>o :Explore<cr>
nnoremap <leader>o :Oil<cr>

" copy filepath relative to current working directory
nnoremap <Leader>pp :let @+=expand('%')<CR>
" copy full filepath
nnoremap <Leader>pf :let @+=expand('%:p')<CR>
" copy filename
nnoremap <Leader>pn :let @+=expand('%:t')<CR>

" source local .lvimrc
nnoremap <leader>s :so .lvimrc<cr>

" execute current file
nnoremap <leader>ue :!%:p<cr>

" switch to the directory of the (o)pen buffer
map      <leader>uo :cd %:p:h<cr>:pwd<cr>

" toggle paste mode
map      <leader>up :setlocal paste!<cr>

" reload files that have changed outside the editor
nnoremap <leader>ur :edit<cr>

" trim whitespace
nnoremap <leader>ut :call TrimWhitespace()<cr>

" toggle spell checking
noremap  <leader>us :setlocal spell! spelllang=en_us<cr>

" save quickly
nmap     <leader>w :w!<cr>

" grep the code base using the silver searcher
" nnoremap <leader>/ :Ag<space>
nnoremap <leader>/ :Rag<space>

" remove highlighting
map      <silent> <leader><cr> :noh<cr>

" Disable Ex mode
nnoremap Q <Nop>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)


" ----------------------------
" Functions
" ----------------------------

" Use with :call TrimWhitespace()
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

" ----------------------------
" Commands
" ----------------------------

" capture output in a scratch buffer :R
:command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide | r !<args>


" ----------------------------
" Plugins
" ----------------------------

" --- gruvbox ---
"
autocmd vimenter * ++nested colorscheme gruvbox
let g:gruvbox_contrast_dark = 'medium'

" --- sneak ---
"
let g:sneak#label = 1
let g:sneak#use_ic_scs = 1

" --- fzf ---
"
let g:fzf_preview_window = ['hidden,right,50%', 'ctrl-/']
" overwrite commands to pass the `--keep-right` option to see the filename for long paths
command! -bang -nargs=* -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--keep-right']}), <bang>0)
command! -bar -bang -nargs=? -complete=buffer Buffers  call fzf#vim#buffers(<q-args>, fzf#vim#with_preview({ "placeholder": "{1}", 'options': ['--keep-right']}), <bang>0)
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, fzf#vim#with_preview({'options': ['--keep-right']}), <bang>0)
" https://github.com/junegunn/fzf.vim/issues/413#issuecomment-320197362
command! -bang -nargs=+ -complete=dir Rag call fzf#vim#ag_raw(<q-args>, {'options': ['--keep-right']}, <bang>0)

" --- OSC Yank
"
"autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | execute 'OSCYankRegister "' | endif

" --- netrw
"
"let g:netrw_liststyle=3
