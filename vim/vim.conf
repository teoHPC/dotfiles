" ----------------------------
" Plugins
" ----------------------------

call plug#begin('~/.vim/bundle')
  Plug 'kien/ctrlp.vim'                 " fuzzy file search
  Plug 'bling/vim-airline'              " status line
  Plug 'lervag/vimtex'                  " latex support
  Plug 'morhetz/gruvbox'                " color scheme
  Plug 'tpope/vim-surround'             " surround words easily
  Plug 'justinmk/vim-sneak'             " jump to locations quickly
  Plug 'ycm-core/YouCompleteMe'         " autocompletion
call plug#end()


" ----------------------------
" General
" ----------------------------

set history=500  " set number of lines to remember
set autoread     " auto read when a file is changed from the outside
set hidden       " allow to hide buffers even with unsaved changes
set lazyredraw   " don't redraw while executing macros (for performance)

" copy to system clipboard
set clipboard=unnamedplus,unnamed

" ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

set ignorecase   " ignore case when searching in general
set smartcase    " be case sensitive when typing uppercase
set hlsearch     " highlight search results
set incsearch    " search as characters are entered

" No annoying sounds on errors
set noerrorbells
set novisualbell
set t_vb=

" Syntax highlighting
syntax enable
set background=dark

set encoding=utf8    " set utf8 as standard encoding
set ffs=unix,dos,mac " use Unix as the standard file type

" turn backup off, since most stuff is in git anyway
set nobackup
set noswapfile

set expandtab       " turn a tab into spaces
set smarttab        " be smart when using tabs
set tabstop=2       " make tabs 2 spaces
set shiftwidth=2    " spaces for autoindents
set autoindent      " on new lines, match indent of previous line

" mark tabs and trailing spaces
set list
set listchars=tab:-.,trail:.

set wrap                         " wrap lines
set whichwrap+=<,>,h,l           " wrap left and right when at the end
set ruler                        " always show current position
set number                       " show line numbers
set showcmd                      " show command in bottom bar
set textwidth=80                 " set max inserted text width
set colorcolumn=+1               " highlight the textwidth column
set cursorline                   " highlight the current line
set showmatch                    " show matching brackets
set scrolloff=5                  " set 5 lines to the cursor when moving vertically
set backspace=indent,eol,start   " make backspace work as expected

set wildmenu       " visual autocomplete for command menu
set wildignorecase " ignore case in wildmenu

filetype indent on  " load filetype-specific indent files
filetype plugin on  " enable filetype plugins

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" treat .tpp files as C++ files
au BufEnter *.tpp :setlocal filetype=cpp

" use ag if available
if executable('ag')
  set grepprg=ag\ --vimgrep
endif


" ----------------------------
" Bindings
" ----------------------------

" set `space` as <leader>
let mapleader=" "

" list buffers and wait for selection to open
nnoremap <leader>b :ls<cr>:b<space>

" close the quickfix, location and preview windows
nnoremap <leader>c :cclose<cr> :lclose<cr> :pclose<cr>

" list buffers and wait for selection to close
nnoremap <leader>d :ls<cr>:bd<space>

" execute current file
nnoremap <leader>e :!%:p<cr>

" format C/C++ code
nnoremap <leader>f :call ClangFormat()<cr>

" YCM go to definition
nnoremap <leader>gg  ::YcmCompleter GoTo<cr>

" YCM get docs
nnoremap <leader>gd  ::YcmCompleter GetDoc<cr>

" YCM (g)et type nformation under the cursor
nnoremap <leader>gt  ::YcmCompleter GetType<cr>

" toggle paste (m)ode
map      <leader>m :setlocal paste!<cr>

" toggle line (n)umbers
nnoremap <leader>n :set nu!<cr>

" switch to the directory of the (o)pen buffer
map      <leader>o :cd %:p:h<cr>:pwd<cr>

" Start ctrlp
nnoremap <leader>p :CtrlP<cr>

" reload files that have changed outside the editor
nnoremap <leader>rf :edit<cr>

" refactor rename
nnoremap <leader>rr  ::YcmCompleter RefactorRename<space>

" trim trailing whitespace
nnoremap <leader>t :call TrimWhitespace()<cr>

" toggle spell checking
noremap  <leader>s :setlocal spell! spelllang=en_us<cr>

" save quickly
nmap     <leader>w :w!<cr>

" grep code base and display results in quickfix
nnoremap <leader>/ :Grep<space>

" remove highlighting
map      <silent> <leader><cr> :noh<cr>


" ----------------------------
" Plugins
" ----------------------------

" --- YouCompleteMe ---
"
" don't seek confirmation every time ycm_conf file is found
let g:ycm_confirm_extra_conf = 0

" better symbol for errors and warnings
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

" --- vimtex ---
"
let g:tex_flavor = 'latex'
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'
let g:vimtex_compiler_latexmk = {
      \ 'options' : [
      \   '-pdf',
      \   '-silent',
      \   '-file-line-error',
      \   '-synctex=1',
      \   '-interaction=nonstopmode',
      \ ]}
" '-verbose',
" '-lualatex',

" --- ctrlp ---
"
let g:ctrlp_custom_ignore = 'build\|git'
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'   " use ag
  let g:ctrlp_use_caching = 0                             " no need to cache
endif

" --- gruvbox ---
"
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'soft'

" --- sneak ---
"
let g:sneak#label = 1
let g:sneak#use_ic_scs = 1

" ----------------------------
" Functions
" ----------------------------

" Use with :call TrimWhitespace()
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

" Format C/C++ code with clang-format
fun! ClangFormat()
  let l:save = winsaveview()
  keeppatterns %!clang-format -style=file
  call winrestview(l:save)
endfun

" grep: Avoid I/O and don't output to terminal; execute in vim's subshell
function! Grep(...)
  return system(join([&grepprg] + [a:1] + [expandcmd(join(a:000[1:-1], ' '))], ' '))
endfunction


" ----------------------------
" Commands
" ----------------------------

" Define a command for Grep()
command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr Grep(<f-args>)

" pull up the quickfix window when :Grep
augroup quickfix
  autocmd!
  autocmd QuickFixCmdPost cgetexpr cwindow
augroup END

" capture output in a scratch buffer
:command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide | r !<args>
