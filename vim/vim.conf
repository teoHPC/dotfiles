" ----------------------------
" Plugins
" ----------------------------

call plug#begin('~/.vim/bundle')
  Plug 'kien/ctrlp.vim'                 " Fuzzy search
  Plug 'bling/vim-airline'              " Status line
  Plug 'lervag/vimtex'                  " latex support
  Plug 'ap/vim-css-color'               " coloring RGB values
  Plug 'morhetz/gruvbox'                " color scheme

  " cd ~/.vim/plugged/YouCompleteMe
  " python3 install.py --clangd-completer
  Plug 'ycm-core/YouCompleteMe'         " autocompletion
call plug#end()


" ----------------------------
" General
" ----------------------------

set history=500  " set number of lines to remember
set autoread     " auto read when a file is changed from the outside
set hidden       " allow to hide buffers even with unsaved changes
set lazyredraw   " don't redraw while executing macros (for performance)

" copy to system clipboard
set clipboard=unnamedplus,unnamed

" ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

set ignorecase   " ignore case when searching in general
set smartcase    " be case sensitive when typing uppercase
set hlsearch     " highlight search results
set incsearch    " search as characters are entered

" No annoying sounds on errors
set noerrorbells
set novisualbell
set t_vb=

" Syntax highlighting
syntax enable
set background=dark

set encoding=utf8    " set utf8 as standard encoding
set ffs=unix,dos,mac " use Unix as the standard file type

" turn backup off, since most stuff is in git anyway
set nobackup
set noswapfile

set expandtab       " turn a tab into spaces
set smarttab        " be smart when using tabs
set tabstop=2       " make tabs 2 spaces
set shiftwidth=2    " spaces for autoindents
set autoindent      " on new lines, match indent of previous line

" mark tabs and trailing spaces
set list
set listchars=tab:-.,trail:.

set wrap                " wrap lines
set whichwrap+=<,>,h,l  " wrap left and right when at the end
set ruler               " always show current position
set number              " show line numbers
set showcmd             " show command in bottom bar
set textwidth=80        " set max inserted text width
set colorcolumn=+1      " highlight the textwidth column
set cursorline          " highlight the current line
set showmatch           " show matching brackets
set scrolloff=5         " set 5 lines to the cursor when moving vertically

set wildmenu       " visual autocomplete for command menu
set wildignorecase " ignore case in wildmenu

filetype indent on  " load filetype-specific indent files
filetype plugin on  " enable filetype plugins

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" treat .tpp files as C++ files
au BufEnter *.tpp :setlocal filetype=cpp


" ----------------------------
" Bindings
" ----------------------------

" set leader to comma
let mapleader = ","
let g:mapleader = ","
let maplocalleader = ","

" fast saving
nmap <leader>w :w!<cr>

" reload files that have changed outside the editor
nnoremap <leader>rf :edit<cr>

" toggle line numbers
nnoremap <leader>n :set nu!<cr>

" toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" toggle spell checking
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>

" list buffers and wait for selection to open
nnoremap gb :ls<cr>:b<space>

" list buffers and wait for selection to close
nnoremap bd :ls<cr>:bd<space>

" close all buffers
nnoremap bD :%bd<cr>:q!<cr>

" execute current file
nnoremap <leader>ef :!%:p<cr>

" switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" format C/C++ code
map <leader>f :call ClangFormat()<cr>

" trim trailing whitespace
noremap <leader>ws :call TrimWhitespace()<cr>

" --- YouCompleteMe ---
"
" don't seek confirmation every time ycm_conf file is found
let g:ycm_confirm_extra_conf = 0

" go to definition of variable/type/function under cursor
nnoremap <leader>g  ::YcmCompleter GoTo<CR>

" print type of symbol under the cursor
nnoremap <leader>t  ::YcmCompleter GetType<CR>

" refactor the name under the cursor
nnoremap <leader>r  ::YcmCompleter RefactorRename<space>

" better symbol for errors and warnings
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

" --- vimtex ---
"
let g:tex_flavor = 'latex'
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'
let g:vimtex_compiler_latexmk = {
      \ 'options' : [
      \   '-pdf',
      \   '-silent',
      \   '-file-line-error',
      \   '-synctex=1',
      \   '-interaction=nonstopmode',
      \ ]}
" '-verbose',
" '-lualatex',

" --- ctrlp ---
"
let g:ctrlp_custom_ignore = 'build\|git'

" --- gruvbox ---
"
colorscheme gruvbox
let g:gruvbox_contrast = 'soft'


" ----------------------------
" Functions
" ----------------------------

" Use with :call TrimWhitespace()
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

" Format C/C++ code with clang-format
fun! ClangFormat()
    let l:save = winsaveview()
    keeppatterns %!clang-format -style=file
    call winrestview(l:save)
endfun
